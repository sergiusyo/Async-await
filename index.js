alert('asdsad')

/*
Асинхронный код - код, команды которого выполняются по очереди, друг за другом. Одна команда
ждет выполнения следующей. 
Асинхронный код(функция) [АФ] - выполняются параллельно. Ее преимущество в том, что она 
выполняется отдельно, не нужно создавать задержку в очереди. Напрммер,чтобы не ждать при
загрузке каких-либо данных, а выполнять что-то другое.
Асинхронную функцию можно вызывать в любом месте, но она будет вызываться в конце, так как
она идёт параллельно, вне потока синхронной функции. АФ в этой очереди нет, она сработает
при её вызове, у неё задержка (3000мс), а остальные функции так же идут друг за другом. Они 
не ждут выполнения АФ. Проще говоряб АФ - вне очереди, она идёт сама собой.
Чтобы остановить выполнение основного потока при вызове функции, добавляют слово await. При 
вызове АФ с await выполнение следующей функции останавливается, она ждёт, пока выполнится 
функция с await. Получается, будто эта АФ с await работает в общем потоке, т.е. будто становится
синхронной. 
АФ можно вызывать много раз. Без await основной поток НЕ ОСТАНАВЛИВАЕТСЯ!
Если мы хотим присвоить значение, которое возвращает АФ, ОБЯЗАТЕЛЬНО используем await.
//При использовании функцию с аргументом в другой функции, так же пишем await. 
//console.log(await fly())
<-------------------------------Вызов АФ без await------------------------------>
// fly()
// hello()
// world()
// fly()
// fly()
// myName()
// fly()
// myAge()
АФ можно использовать внутри другой АФ. Вызываем jump перед "Лечу!"
*/


//<----------------------------вызов АФ внутри АФ------------------------------->
//сразу увидим сообщение с возрастом, т.к. Далее: внутри fly будет задержка. 
//await- мы ждём, когда выполнится jump. И только потом мы получим сообщение "Прыжок!" 
//(задержка 4000ms), jump выполнится и в консоли будет "Лечу!" 


//<---------------------------Пример с возвращаемым значением возрaста----------------->
//консоль выдаёт: Promise {<pending>}. Это означает, что функция ждёт выполнения, т.е. она ВНЕ
//основного потока. Чтобы связать эту функцию с основным потоком, нужно использовать await. Мы 
//ждём выполнения функции age, и лишь потом присваиваем в переменную х. Перед  
//присваиванием НЕ ЗАБЫВАЙТЕ писать await!
// async function age() {
//     //задержка начинается
//     await new Promise((resolve, reject) => setTimeout(resolve, 3000));
//     //задержка завершается
//     return 20
// }

// let x = await age()
// console.log(x)
// function hello() {
//     console.log('Hello');
// }


function hello() {
    console.log('Hello');
}

function world() {
    console.log('World!');
}

function myName() {
    console.log('Моё имя: Антон');
}

function myAge() {
    console.log('Мне: 18');
}

async function fly() {
    //задержка начинается
    await new Promise((resolve, reject) => setTimeout(resolve, 3000));
    //задержка завершается
    await jump()
    console.log('Лечу!');
}

async function jump() {
    //задержка начинается
    await new Promise((resolve, reject) => setTimeout(resolve, 4000));
    //задержка завершается
    console.log('Прыжок!');
}

async function age() {
    //задержка начинается
    await new Promise((resolve, reject) => setTimeout(resolve, 3000));
    //задержка завершается
    return 20
}

let x = await age()
console.log(x)


hello()
world()
myName()
myAge()
fly()
age()
